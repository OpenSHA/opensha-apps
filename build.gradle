/*
 * opensha-apps dependencies
 */

apply from: '../opensha-commons/build-common.gradle'

dependencies {

    /* no remote repo */
    compileAndResource files('lib/jpedal.jar')
    
    compileOnly project(path: ':opensha-ucerf3', configuration: 'compileOnly')
    compileAndResource project(path: ':opensha-ucerf3')

    testCompile 'junit:junit:4.12'
}

task appHCJar(type: Jar) {
    baseName = 'HazardCurveGUI-'+getDate()+'-'+getGitHash()
    from { configurations.compileAndResource.collect {
        it.isDirectory() ? it : zipTree(it).matching {
            exclude { it.path.contains('META-INF') }
        }
    }}
    from { configurations.compileOnly.collect {
        it.isDirectory() ? it : zipTree(it).matching {
            exclude { it.path.contains('META-INF') }
        }
    }}
    from(project(':opensha-commons').projectDir) {
    	include 'build.version'
   	}
	manifest {
    	attributes(
			'Class-Path': configurations.compileAndResource.collect { it.getName() }.join(' '),
			'Main-Class': 'org.opensha.sha.gui.HazardCurveApplication'
		)
	}
    with jar
}

void createAppTask(String taskName, String prefix, String mainClass) {
	task (taskName, type: Jar) {
		baseName = prefix+'-'+getDate()+'-'+getGitHash()
    	from { configurations.compileAndResource.collect {
        	it.isDirectory() ? it : zipTree(it).matching {
            	exclude { it.path.contains('META-INF') }
        	}
    	}}
    	from { configurations.compileOnly.collect {
	        it.isDirectory() ? it : zipTree(it).matching {
            	exclude { it.path.contains('META-INF') }
        	}
    	}}
    	from(project(':opensha-commons').projectDir) {
	    	include 'build.version'
	   	}
		manifest {
    		attributes(
				'Class-Path': configurations.compileAndResource.collect { it.getName() }.join(' '),
				'Main-Class': mainClass
			)
		}
    	with jar
   }
}
createAppTask("appJarHC", "HazardCurveGUI", "org.opensha.sha.gui.HazardCurveApplication")
createAppTask("appJarHS", "HazardSpectrumGUI", "org.opensha.sha.gui.HazardSpectrumApplication")
createAppTask("appJarAR", "AttenuationRelationshipGUI", "org.opensha.sha.imr.attenRelImpl.gui.AttenuationRelationshipApplet")
createAppTask("appJarSM", "ShakeMapGUI", "org.opensha.sha.gui.ScenarioShakeMapApp")
createAppTask("appJarSD", "SiteDataGUI", "org.opensha.commons.data.siteData.gui.SiteDataCombinedApp")
createAppTask("appJarGMT", "GMTMapApp", "org.opensha.commons.mapping.gmt.gui.GMT_MapGeneratorApplet")
createAppTask("appJarIM", "IMEventSetAppV3", "org.opensha.sha.calc.IM_EventSet.v03.IM_EventSetCalc_v3_0_ASCII")

task appZipIM(type: Zip) {
	dependsOn 'appJarIM'
	from ('build/libs/') {
		include 'IMEventSetAppV3-'+getDate()+'-'+getGitHash()+'.jar'
		rename (('IMEventSetAppV3-'+getDate()+'-'+getGitHash()+'.jar'), 'IM_EventSetCalc_v3_0_ASCII.jar')
	}
	from ('src/org/opensha/sha/calc/IM_EventSet/v03/') {
		include '*.txt'
	}
	archiveName 'IM_EventSetCalc_v3_0_ASCII.zip'
}

task appJars(type: GradleBuild) {
     tasks = ['appJarHC', 'appJarHS', 'appJarAR', 'appJarSM', 'appJarSD', 'appJarGMT']
}
